import ft4222
from ft4222.SPI import Cpha, Cpol
from ft4222.SPIMaster import Mode, Clock, SlaveSelect
from ft4222.GPIO import Port, Dir
from time import sleep
import sys
from timeit import default_timer as timer
import PIL.Image as Image
import cv2
import numpy

IMG_W=320
IMG_H=240

nbDev = ft4222.createDeviceInfoList()
print("nb of fdti devices: {}".format(nbDev))

ftDetails = []

if nbDev <= 0:
    print("no devices found...")
    sys.exit(0)

print("devices:")
for i in range(nbDev):
    detail = ft4222.getDeviceInfoDetail(i, False)
    print(" - {}".format(detail))
    ftDetails.append(detail)



# open 'device' with default description 'FT4222 A'
devA = ft4222.openByDescription('FT4222')
# and the second 'device' on the same chip
#devB = ft4222.openByDescription('FT4222 B')

# init spi master
""" 
    Attributes:
        NONE:
        DIV_2: 1/2 System Clock
        DIV_4: 1/4 System Clock
        DIV_8: 1/8 System Clock
        DIV_16: 1/16 System Clock
        DIV_32: 1/32 System Clock
        DIV_64: 1/64 System Clock
        DIV_128: 1/128 System Clock
        DIV_256: 1/256 System Clock
        DIV_512: 1/512 System Clock

    NONE    = 0 // 60000000 Hz
    DIV_2   = 1 // 30000000 Hz
    DIV_4   = 2 // 15000000 Hz
    DIV_8   = 3 //  7500000 Hz
    DIV_16  = 4 //  3750000 Hz
    DIV_32  = 5 //  1875000 Hz
    DIV_64  = 6 //   937500 Hz
    DIV_128 = 7
    DIV_256 = 8
    DIV_512 = 9

Cpha.CLK_LEADING  Cpha.CLK_TRAILING
Cpol.IDLE_LOW, Cpol.IDLE_HIGH

"""

# Clock on UMFT4222EV is at 60 MhZ 
devA.spiMaster_Init(Mode.SINGLE, Clock.DIV_4,  Cpha.CLK_LEADING, Cpol.IDLE_LOW, SlaveSelect.SS0)

# generate data to send
data = bytes([x for x in range(0,15)])


# set port0 1 (-> note this is *not* the spi chip select, the chip select (SS0) is generated by the spi core)
#devB.gpio_Write(Port.P0, 1)

while True:
    data=[]
    start = timer()
    #while len(data)<320*240:
    for x in range(0, 240):
        # write data in a single write
        #devA.spiMaster_SingleWrite(data, True)
        tmp_data= devA.spiMaster_SingleRead(IMG_W+1,True)
        data+=tmp_data[1:321]
        #print(data)
        # wait a short while
        #sleep(0.5)
    end = timer()
    
    #im = Image.frombuffer('L',(IMG_W,IMG_H),data,'raw','L',0,1)
    #im = Image.open(data)
    flatNumpyArray = numpy.array(data,dtype=numpy.uint8)

    open_cv_image = flatNumpyArray.reshape(IMG_H, IMG_W)
    
    cv2.imshow('Gap Output',open_cv_image)
    cv2.waitKey(1)
        
    ttime=(end - start)
    fps=1/ttime
    print('FPS: ',round(fps,2),'\t Bandwidth: ',round(((IMG_W*IMG_H)/ttime)/1000000,3),'MBytes/s')




